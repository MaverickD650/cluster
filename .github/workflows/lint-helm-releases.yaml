name: Validate Helm Releases

on:
  push:
    branches:
      - main  # Change this to your default branch
  pull_request:
    branches:
      - main  # Change this to your default branch

jobs:
  validate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: List repository files
        run: |
          echo "Listing files in the repository:"
          ls -R

      - name: Set up Helm
        uses: azure/setup-helm@v1
        with:
          version: v3.7.0  # Specify the Helm version you want to use

      - name: Validate Helm Releases with helm template
        run: |
          # Find all helm-release.yaml files in the clusters/main/kubernetes directory
          for file in $(find clusters/main/kubernetes -type f -name 'helm-release.yaml'); do
            echo "Validating $file"
            
            # Extract the chart and repository details from the HelmRelease file
            chart_name=$(yq eval '.spec.chart.spec.chart' "$file")
            repo_name=$(yq eval '.spec.chart.spec.sourceRef.name' "$file")
            repo_kind=$(yq eval '.spec.chart.spec.sourceRef.kind' "$file")
            chart_version=$(yq eval '.spec.chart.spec.version' "$file")  # Extract version if specified

            # Check if the repo kind is HelmRepository
            if [[ "$repo_kind" == "HelmRepository" ]]; then
              # Extract the repository URL from the corresponding HelmRepository file
              repo_file=$(find ./repositories/helm -type f -name "*$repo_name*.yaml")
              
              if [[ -z "$repo_file" ]]; then
                echo "Error: HelmRepository '$repo_name' referenced in $file not found."
                exit 1
              fi

              # Extract the URL of the HelmRepository
              repo_url=$(yq eval '.spec.url' "$repo_file")
              echo "Using Helm repository URL: $repo_url"  # Debugging output

              # Add the Helm repository
              echo "Adding Helm repository: $repo_name"
              helm repo add "$repo_name" "$repo_url" --force-update

              # Check if the chart exists in the repository
              echo "Checking for chart '$chart_name' in repository '$repo_name'"
              if ! helm search repo "$repo_name/$chart_name" --versions; then
                echo "Error: Chart '$chart_name' not found in repository '$repo_name'."
                exit 1
              fi

              # Render the chart using helm template
              chart_reference="$repo_name/$chart_name"
              if [[ -n "$chart_version" ]]; then
                echo "Running: helm template $chart_reference --version $chart_version --values $file"
                helm template "$chart_reference" --version "$chart_version" --values "$file" --output-dir ./output
              else
                echo "Running: helm template $chart_reference --values $file"
                helm template "$chart_reference" --values "$file" --output-dir ./output
              fi
            else
              echo "Warning: Unknown sourceRef kind '$repo_kind' in $file."
            fi
          done
